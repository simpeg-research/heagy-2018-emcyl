# Autogenerated at 2018-01-31T11:25:30.354645 on version 0.0.4
import casingSimulations
import numpy as np

# Set up the simulation
sim = casingSimulations.run.SimulationTDEM(
    modelParameters='ModelParameters.json',
    meshGenerator='MeshParameters.json',
    src='Source.json',
    fields_filename='fields.npy'
)

# run the simulation
fields = sim.run()

# Set up a 2D simulation for the same source location
mesh2D = sim.meshGenerator.copy()
mesh2D.hy = np.r_[2*np.pi]
src2D = getattr(casingSimulations.sources, sim.src.__class__.__name__)(
    modelParameters=sim.modelParameters,
    meshGenerator=mesh2D,
)
sim2D = casingSimulations.run.SimulationTDEM(
    modelParameters=sim.modelParameters,
    meshGenerator=mesh2D,
    src=src2D,
    fields_filename='fields2D.npy',
    filename='simulation2D.json'
)

# run the 2D simulation
fields2D = sim2D.run()

# Set up DC survey for the same source location
csz = sim.meshGenerator.csz
# make sure it is in the cell
src_a = sim.src.src_a_closest - np.r_[0., 0., csz/2.]
src_b = sim.src.src_b_closest - np.r_[0., 0., csz/2.]

simDC = casingSimulations.run.SimulationDC(
    filename='simulationDC.json',
    modelParameters=sim.modelParameters,
    meshGenerator=sim.meshGenerator,
    src_a=src_a,
    src_b=src_b
)
# run the DC simulation
fieldsDC = simDC.run()


# where we are going to evaluate the fields
from SimPEG import Utils
x_locs = np.r_[5, 11, 51, 101, 151, 201, 251, 301]
y_locs = np.r_[np.pi/2.]
z_locs = np.r_[sim.src.src_a[2]]
points = Utils.closestPoints(
    sim.meshGenerator.mesh, Utils.ndgrid(x_locs, y_locs, z_locs), 'Fx'
)

j_compare = fields[:, 'j', :]
e_compare = sim.prob.MfI * sim.prob.MfRho * j_compare

jx_compare = j_compare[points, :]
ex_compare = e_compare[points, :]

np.save('jx_compare.npy', jx_compare)
np.save('ex_compare.npy', ex_compare)

